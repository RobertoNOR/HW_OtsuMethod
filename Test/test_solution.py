from unittest import TestCase
from Script.solution_otsu import otsu_method


class TestOtsuMethod(TestCase):
    # 1. Тест на пустое изображение (чёрное изображение)
    def test_empty_image(self):
        test_array_of_rgb = [
            [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
            [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
            [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
            [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
            [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]
        ]
        self.assertEqual(otsu_method(test_array_of_rgb),
                         [[0, 0, 0, 0, 0],
                          [0, 0, 0, 0, 0],
                          [0, 0, 0, 0, 0],
                          [0, 0, 0, 0, 0],
                          [0, 0, 0, 0, 0]])

    # 2. Тест на изображение с четким контрастом
    def test_clear_contrast(self):
        test_array_of_rgb = [
            [[255, 0, 0], [255, 0, 0], [0, 255, 0], [0, 255, 0]],
            [[255, 0, 0], [255, 0, 0], [0, 255, 0], [0, 255, 0]],
            [[255, 0, 0], [255, 0, 0], [0, 255, 0], [0, 255, 0]],
            [[255, 0, 0], [255, 0, 0], [0, 255, 0], [0, 255, 0]],
            [[255, 0, 0], [255, 0, 0], [0, 255, 0], [0, 255, 0]]
        ]
        self.assertEqual(
            otsu_method(test_array_of_rgb),
            [[0, 0, 1, 1],
             [0, 0, 1, 1],
             [0, 0, 1, 1],
             [0, 0, 1, 1],
             [0, 0, 1, 1]])

    # 3. Тест на изображение с шумом
    def test_noise_image(self):
        test_array_of_rgb = [
            [[0, 0, 0], [255, 0, 0], [34, 56, 78], [0, 255, 0], [0, 0, 255]],
            [[255, 255, 0], [100, 100, 100], [0, 0, 0], [150, 50, 50], [0, 0, 0]],
            [[255, 255, 0], [200, 200, 200], [10, 20, 30], [0, 100, 200], [150, 250, 100]],
            [[70, 130, 180], [0, 0, 0], [255, 255, 255], [25, 75, 125], [60, 60, 60]],
            [[0, 0, 0], [80, 90, 100], [255, 0, 255], [10, 50, 100], [0, 0, 0]]
        ]
        self.assertEqual(otsu_method(test_array_of_rgb),
                         [[0, 0, 0, 1, 0],
                          [1, 0, 0, 0, 0],
                          [1, 1, 0, 0, 1],
                          [0, 0, 1, 0, 0],
                          [0, 0, 0, 0, 0]])

    # 4. Тест на маленькое изображение
    def test_small_image(self):
        test_array_of_rgb = [
            [[255, 127, 0], [255, 0, 0]],
            [[75, 0, 130], [75, 0, 130]]
        ]
        self.assertEqual(otsu_method(test_array_of_rgb),
                         [[1, 0],
                          [0, 0]])

    # 5. Тест на градиентное изображение
    def test_gradient_image(self):
        test_array_of_rgb = [
            [[10, 10, 10], [50, 50, 50], [100, 100, 100], [150, 150, 150], [200, 200, 200]],
            [[10, 10, 10], [50, 50, 50], [100, 100, 100], [150, 150, 150], [200, 200, 200]],
            [[10, 10, 10], [50, 50, 50], [100, 100, 100], [150, 150, 150], [200, 200, 200]],
            [[10, 10, 10], [50, 50, 50], [100, 100, 100], [150, 150, 150], [200, 200, 200]],
            [[10, 10, 10], [50, 50, 50], [100, 100, 100], [150, 150, 150], [200, 200, 200]]
        ]
        self.assertEqual(otsu_method(test_array_of_rgb),
                         [[0, 0, 0, 1, 1],
                          [0, 0, 0, 1, 1],
                          [0, 0, 0, 1, 1],
                          [0, 0, 0, 1, 1],
                          [0, 0, 0, 1, 1]])

    # 6. Тест на яркие цветные полосы
    def test_color_stripes(self):
        test_array_of_rgb = [
            [[255, 0, 0], [255, 0, 0], [0, 255, 0], [0, 255, 0], [255, 255, 0]],
            [[255, 0, 0], [255, 0, 0], [0, 255, 0], [0, 255, 0], [255, 255, 0]],
            [[0, 0, 255], [0, 0, 255], [255, 0, 255], [255, 0, 255], [0, 255, 255]],
            [[0, 0, 255], [0, 0, 255], [255, 0, 255], [255, 0, 255], [0, 255, 255]],
            [[255, 255, 0], [255, 255, 0], [0, 255, 0], [0, 255, 0], [255, 0, 0]],
        ]
        self.assertEqual(otsu_method(test_array_of_rgb),
                         [[0, 0, 1, 1, 1],
                          [0, 0, 1, 1, 1],
                          [0, 0, 0, 0, 1],
                          [0, 0, 0, 0, 1],
                          [1, 1, 1, 1, 0]])

    # 8. Тест на яркие цветные квадраты
    def test_color_squares(self):
        test_array_of_rgb = [
            [[255, 0, 0], [255, 0, 0], [255, 0, 0], [0, 255, 0], [0, 255, 0]],
            [[255, 0, 0], [255, 0, 0], [255, 0, 0], [0, 255, 0], [0, 255, 0]],
            [[255, 0, 0], [255, 0, 0], [255, 0, 0], [0, 255, 0], [0, 255, 0]],
            [[0, 0, 255], [0, 0, 255], [0, 0, 255], [255, 255, 0], [255, 255, 0]],
            [[0, 0, 255], [0, 0, 255], [0, 0, 255], [255, 255, 0], [255, 255, 0]],
        ]
        self.assertEqual(otsu_method(test_array_of_rgb),
                         [[0, 0, 0, 1, 1],
                          [0, 0, 0, 1, 1],
                          [0, 0, 0, 1, 1],
                          [0, 0, 0, 1, 1],
                          [0, 0, 0, 1, 1]])

    # 8. Тест на изображение с чередующимися черными и белыми пикселями
    def test_alternating_black_white(self):
        test_array_of_rgb = [
            [[0, 0, 0], [255, 255, 255], [0, 0, 0], [255, 255, 255]],
            [[255, 255, 255], [0, 0, 0], [255, 255, 255], [0, 0, 0]],
            [[0, 0, 0], [255, 255, 255], [0, 0, 0], [255, 255, 255]],
            [[255, 255, 255], [0, 0, 0], [255, 255, 255], [0, 0, 0]],
            [[0, 0, 0], [255, 255, 255], [0, 0, 0], [255, 255, 255]],
        ]
        self.assertEqual(otsu_method(test_array_of_rgb),
                         [[0, 1, 0, 1],
                          [1, 0, 1, 0],
                          [0, 1, 0, 1],
                          [1, 0, 1, 0],
                          [0, 1, 0, 1]])

    # 9. Тест на размытое изображение
    def test_blurry_image(self):
        test_array_of_rgb = [
            [[150, 150, 150], [200, 200, 200], [180, 180, 180]],
            [[160, 160, 160], [190, 190, 190], [170, 170, 170]],
            [[170, 170, 170], [180, 180, 180], [175, 175, 175]],
            [[180, 180, 180], [190, 190, 190], [200, 200, 200]],
            [[150, 150, 150], [160, 160, 160], [155, 155, 155]],
        ]
        self.assertEqual(otsu_method(test_array_of_rgb),
                         [[0, 1, 1],
                          [0, 1, 0],
                          [0, 1, 1],
                          [1, 1, 1],
                          [0, 0, 0]])

    # 10. Тест на большое изображение
    def test_large_image(self):
        test_array_of_rgb = [
            [[255, 0, 0] for _ in range(100)] for _ in range(50)  # 100x50 красное изображение
        ]
        result = otsu_method(test_array_of_rgb)
        # Ожидаемое бинарное изображение (все красные пиксели должны быть преобразованы в 1)
        self.assertEqual(result, [[1 for _ in range(100)] for _ in range(50)])
